# Дан вектор целей с очень несбалансированными классами.

# Собрать больше данных. Если это невозможно, то изменить метрические показатели, используемые для оценивания модели.
# Если это не работает, рассмотреть возможность использования встроенных в модель параметров веса классов (если
# таковые имеются), делая понижающий или повышающий отбор. Мы рассмотрим метрические показатели оценивания чуть позже
# в одной из следующих глав, а пока сосредоточимся на параметрах веса классов, понижающем и повышающем отборе. Для
# того чтобы продемонстрировать наши решения, нам нужно создать немного данных с несбалансированными классами. Набор
# данных ирисов Фишера содержит три сбалансированных класса по 50 наблюдений, каждый из которых указывает на вид
# цветка — ирис щетинистый (Iris setosa), ирис виргинский {Iris virginica) и ирис разноцветный (Iris versicolor). Для
# того чтобы разбалансировать набор данных, мы удаляем 40 из 50 наблюдений ириса щетинистого, а затем объединяем
# классы ирис виргинский и ирис разноцветный. Конечным результатом является бинарный вектор целей, указывающий на то,
# является ли наблюдение цветком ириса щетинистого или нет. Результатом станут 10 наблюдений ирис щетинистый (класс
# 0) и 100 наблюдений не ирис щетинистый (класс 1):

import numpy as np
from sklearn.ensemble import RandomForestClassifier
from sklearn.datasets import load_iris

iris = load_iris()

# Создать матрицу признаков
features = iris.data

# Создать вектор целей
target = iris.target

# Удалить первые 40 наблюдений
features = features[40:, :]
target = target[40:]

# Создать бинарный вектор целей, указывающий, является ли класс 0
target = np.where((target == 0), 0, 1)


# Взглянуть на несбалансированный вектор целей
print(target)

# Многие алгоритмы в scikit-leam предлагают параметр для взвешивания классов
# во время тренировки, чтобы противодействовать эффекту их разбалансировки.
# Хотя мы еще его не рассматривали, классификатор на основе случайного леса
# RandomForestciassifier является популярным классификационным алгоритмом и
# включает параметр class weight. Можете передать аргумент, явно задающий желаемые веса классов:

weights = {0: .9, 1: 0.1}

# Создать классификатор на основе случайного леса с весами
RandomForestClassifier(class_weight=weights)
RandomForestClassifier(bootstrap=True, class_weight={0: 0.9, 1: 0.1},
                       criterion='gini', max_depth=None,
                       max_features='auto',
                       max_leaf_nodes=None, min_impurity_decrease=0.0,
                       min_impurity_split=None, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       n_estimators=10, n_jobs=1, oob_score=False,
                       random_state=None, verbose=0, warm_start=False)





